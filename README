
Here's an idea: printing can be performed by walking the graph. Now that each
node knows its direct family, I can shield the execution of the print method
with two criteria:

 - no father gets printed before its child; each node prints itself before
   invoking its parents;

 - no child gets printed after its parent; each node invokes its children before
   printing itself;

It's working, but being recursive is bad. Long histories trigger the maximum
recursion block. I'm thinking of a list of nodes to visit, in sequence.

Half of the recursion unrolling is done. Before I re-add children, I shall make
this graph readable again, by adding just-in-time indentation.

Here's an idea: keep track of all (already printed?) commits with multiple
parents, which are waiting for one or more of them. Will this allow me to wait
until I have the max width of a branch?

Up to this point, I cannot deal with multiple basesâ€¦
