
Vertical unroll
===============

As it is loaded, the graph grows from top to bottom, from recent to past
commits, as Git gives it; each commit knows its parent(s). With the first walk
of the graph as it is, each commit gets to know its children.

Starting from the first head, the unrolling orders commits with two rule:

 - a commit appears only after all its children;
 - a commit appears strictly before any of its parents;

It's working, but being recursive is bad. Long histories trigger the maximum
recursion block. I'm thinking of a list of nodes to visit, in sequence.

Half of the recursion unrolling is done. Before I re-add children, I shall make
this graph readable again, by adding just-in-time indentation.

Here's an idea: keep track of all (already printed?) commits with multiple
parents, which are waiting for one or more of them. Will this allow me to wait
until I have the max width of a branch?

Up to this point, I cannot deal with multiple basesâ€¦ now I can. Now I need to
order children consistently.
