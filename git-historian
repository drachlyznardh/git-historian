#!/usr/bin/python

from subprocess import check_output
import re

class Node:
	def __init__ (self):
		self.hash = ""
		self.parent = []
		self.child = []
		self.ref = []
		self.column = -1
		self.static = 0
		self.printed = 0

	def to_string(self):
		if self.column > 0:
			indent = ('%%%ds' % (3 * self.column)) % (' ')
		else: indent = ''
		str = "%s  Hash {%s}" % (indent, self.hash)
		for i in self.parent: str += "\n%sParent {%s}" % (indent, i)
		for i in self.child:  str += "\n%s Child {%s}" % (indent, i)
		for i in self.ref:    str += "\n%s   Ref {%s}" % (indent, i)
		return str
	
	def inherit_column (self, commit_map, base):
		if self.column != -1: return
		if len(self.ref):
			for i in self.ref:
				if re.match(r'''^tag: r[0-9]+''', i):
					#print "%s matches release!" % i
					self.static = 1
					self.column = 1
					break
				if re.match(r'''^tag: h[0-9]+''', i):
					#print "%s matches hotfix!" % i
					self.static = 1
					self.column = 0
					break
		if not self.static: self.column = base
		if len(self.parent) == 1:
			commit_map[self.parent[0]].inherit_column(commit_map, self.column)
		else:
			counter = self.column
			for i in self.parent:
				commit_map[i].inherit_column(commit_map, counter)
				counter += 1

def get_history():
	git_history_dump = check_output(["git", "log", '--pretty="%H %P%d"'])
	history = []

	for line in git_history_dump.split('\n'):
		if len(line) == 0: continue

		hashes_n_refs = re.compile(r'''"(.*) \((.*)\)"''').match(line)
		if hashes_n_refs:
			hashes = hashes_n_refs.group(1).split()
			refs = hashes_n_refs.group(2).split(',')
		else:
			hashes = line[1:-1].split()
			refs = ""

		node = Node()
		if hashes:
			node.hash = hashes[0]
			for i in hashes[1:]: node.parent.append(i)
		for i in refs: node.ref.append(i.strip())

		history.append(node)
	return history

history = get_history()
commit_map = {}

for i in history:
	commit_map[i.hash] = i

if len(history):
	history[0].inherit_column(commit_map, 4)

for i in history:
	print("%s\n" % i.to_string())
