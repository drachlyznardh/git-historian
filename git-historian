#!/usr/bin/python

from subprocess import check_output
import re

class Node:
	def __init__ (self):
		self.hash = ""
		self.parent = []
		self.child = []
		self.ref = []
		self.column = -1
		self.static = 0
		self.printed = 0
		self.done = 0

	def print_graph(self, commit_map):
		if self.printed: return
		self.printed = 1

		for i in self.child:
			commit_map[i].print_graph(commit_map)
		print("%s" % self.to_oneline())
		for i in reversed(self.parent):
			commit_map[i].print_graph(commit_map)

	def to_oneline(self):
		if self.column > 0:
			offset = ('%%%ds' % (2 * self.column) % '')
		else: offset = ''
		return "%s* %s" % (offset, self.hash)

	def to_string(self):
		if self.column > 0:
			indent = ('%%%ds' % (2 * self.column)) % (' ')
		else: indent = ''
		str = "%s  Hash {%s}" % (indent, self.hash)
		for i in self.parent: str += "\n%sParent {%s}" % (indent, i)
		for i in self.child:  str += "\n%s Child {%s}" % (indent, i)
		for i in self.ref:    str += "\n%s   Ref {%s}" % (indent, i)
		return str

	def know_your_children(self, child):
		if child not in self.child:
			self.child.append(child)

	def know_your_parents(self, commit_map):
		for i in self.parent:
			parent = commit_map[i]
			if parent:
				parent.know_your_children(self.hash)

	def inherit_column (self, commit_map, base):
		if self.column != -1: return
		if len(self.ref):
			for i in self.ref:
				if re.match(r'''^tag: r[0-9]+''', i):
					self.static = 1
					self.column = 1
					break
				if re.match(r'''^tag: h[0-9]+''', i):
					self.static = 1
					self.column = 0
					break
		if not self.static: self.column = base

		counter = self.column
		for i in self.child:
			commit_map[i].inherit_column(commit_map, counter)
			counter += 1

		counter = self.column
		for i in self.parent:
			commit_map[i].inherit_column(commit_map, counter)
			counter += 1

class Order:
	def __init__ (self, first):
		self.stack = [[first]]

	def trim(self):
		while len(self.stack) > 0 and len(self.stack[0]) == 0:
			self.stack.pop(0)

	def get(self):
		self.trim()
		if len(self.stack) > 0 and len(self.stack[0]) > 0:
			return self.stack[0][0]
		return None

	def pop(self):
		self.trim()
		if len(self.stack) > 0 and len(self.stack[0]) > 0:
			return self.stack[0].pop(0)
		return None

	def push(self, value):
		if len(self.stack) > 0:
			self.stack[0].append(value)
		else:
			self.stack.append([value])
	
	def ppush(self, value):
		self.stack.append([value])

	def show(self):
		self.trim()
		message = ''
		for i in self.stack:
			message += '\t[' + i[0]
			for ii in i[1:]:
				message += ", " + ii
			message += ']\n'
		print "{\n%s}" % message

class Historian:
	def __init__ (self):
		self.head = 0
		self.commit = {}
	
	def get_history(self):
		git_history_dump = check_output(["git", "log", '--pretty="%H %P%d"', "--all"])

		for line in git_history_dump.split('\n'):
			if len(line) == 0: continue

			hashes_n_refs = re.compile(r'''"(.*) \((.*)\)"''').match(line)
			if hashes_n_refs:
				hashes = hashes_n_refs.group(1).split()
				refs = hashes_n_refs.group(2).split(',')
			else:
				hashes = line[1:-1].split()
				refs = ""

			node = Node()
			if hashes:
				node.hash = hashes[0]
				for i in hashes[1:]: node.parent.append(i)
			for i in refs: node.ref.append(i.strip())

			if not self.head: self.head = node.hash
			self.commit[node.hash] = node
	
	def all_in_one_call(self):
		
		visit = Order(self.head)
		#visit.show()

		while 1:
			target = visit.pop()

			if not target:
				print "No Target"
				break
			commit = self.commit[target]
			if not commit:
				print "No Commit"
				break
			if commit.done:
				#visit.pop()
				print "%s is done, skipping" % commit.hash
				continue

			print "%s %d" % (commit.hash[0:7], len(commit.parent))
			if len(commit.parent) > 1:
				#print "Adding all parents"
				for i in reversed(commit.parent):
					#print "Adding parent %s" % i
						parent = self.commit[i]
						if parent and not parent.done:
							visit.ppush(i)
				#visit.show()
			elif len(commit.parent) > 0:
				#print "Adding lone parent"
					parent = self.commit[commit.parent[0]]
					if parent and not parent.done:
						visit.push(commit.parent[0])
			commit.done = 1

			#visit.pop()
			visit.show()

	def tell_the_story(self):

		if not self.commit:
			self.get_history()

		for i in self.commit:
			self.commit[i].know_your_parents(self.commit)
	
		if self.head:
			self.all_in_one_call()
			#self.commit[self.head].inherit_column(self.commit, 2)
			#self.commit[self.head].print_graph(self.commit)

historian = Historian()
historian.tell_the_story()

